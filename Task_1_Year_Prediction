import numpy as np
import pandas as pd
from sklearn import metrics, neighbors
from sklearn.linear_model import LinearRegression, Ridge
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import make_scorer, precision_score
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import KFold

sizes = [100, 500, 1000, 5000, 10000, 50000, 100000, 500000]

filename = "YearPredictionMSD.csv"
year_pred = pd.read_csv(filename)


# Normalise results list
def normalise_results(result_list):
    for item in range(len(result_list)):
        norm = np.linalg.norm(result_list)
        n = result_list[item] / norm
        result_list[item] = n
    return result_list


# Iterate through the different chunk sizes and apply each algorithm and metric
for size_index in range(len(sizes)):

    X = np.array(year_pred[:sizes[size_index]])
    X = X[:,1:]

    Y = np.array(year_pred[:sizes[size_index]])
    Y = Y[:,0]

    X = X.astype('int')
    Y = Y.astype('int')

    kf = KFold(n_splits=10, random_state=0)

    lin_reg = LinearRegression()

    # Linear Regression
    lin_reg = LinearRegression()
    # - Mean Absolute Error
    lin_abs_error = cross_val_score(lin_reg, X, Y, cv=kf, scoring='neg_mean_absolute_error')
    lin_abs_error_norm = normalise_results(lin_abs_error)                                   # normalise results list
    mean_lin_abs_error = -1 * lin_abs_error_norm.mean()                                     # Multiply by -1 and find mean
    print(sizes[size_index], "lin mean absolute error: ", mean_lin_abs_error)

    # - Mean Squared Error
    lin_sq_error = cross_val_score(lin_reg, X, Y, cv=kf, scoring='neg_mean_squared_error')
    lin_sq_error_norm = normalise_results(lin_sq_error)                                     # normalise results list
    mean_lin_sq_error = -1 * lin_sq_error_norm.mean()                                       # Multiply by -1 and find mean
    print(sizes[size_index], "lin mean squared error: ", np.sqrt(mean_lin_sq_error))

    # Ridge Regression
    ridge_reg = Ridge()
    # ridge_reg.normalize()
    # - Mean Absolute Error
    ridge_abs_error = cross_val_score(ridge_reg, X, Y, cv=kf, scoring='neg_mean_absolute_error')
    ridge_abs_error_norm = normalise_results(ridge_abs_error)                                # normalise results list
    mean_ridge_abs_error = -1 * ridge_abs_error_norm.mean()                                  # Multiply by -1 and find mean
    print(sizes[size_index], "ridge mean absolute error: ", mean_ridge_abs_error)

    # - Mean Squared Error
    ridge_sq_error = cross_val_score(ridge_reg, X, Y, cv=kf, scoring='neg_mean_squared_error')
    ridge_sq_error_norm = normalise_results(ridge_sq_error)                                   # normalise results list
    mean_ridge_sq_error = -1 * ridge_sq_error_norm.mean()                                     # Multiply by -1 and find mean
    print(sizes[size_index], "ridge mean squared error: ", np.sqrt(mean_ridge_sq_error))

    if sizes[size_index] < 5000:
        # Logistic Regression
        log_reg = LogisticRegression()
        # - Accuracy
        accuracy = cross_val_score(log_reg, X, Y, cv=kf, scoring='accuracy')
        mean_accuracy = accuracy.mean()
        print(sizes[size_index], "accuracy: ", mean_accuracy)
        # - Average Precision
        score = make_scorer(precision_score, average="weighted")
        avg_precision = cross_val_score(log_reg, X, Y, cv=kf, scoring=score)
        mean_avg_precision = avg_precision.mean()
        print(sizes[size_index], "average precision: ", mean_avg_precision)

    # Other Classification - K-nearest Neighbours
    knn = neighbors.KNeighborsClassifier()
    # - Accuracy
    k_nn = cross_val_score(knn, X, Y, cv=kf, scoring='accuracy')
    mean_knn = k_nn.mean()
    print(sizes[size_index], "knn accuracy: ", mean_knn)
    # - Average Precision
    knn_avg_precision = cross_val_score(knn, X, Y, cv=kf, scoring=score)
    mean_knn_avg_precision = avg_precision.mean()
    print(sizes[size_index], "knn average precision: ", mean_knn_avg_precision)

    print("\n")


